[build-system]
requires = ["uv_build>=0.8.22,<0.9.0"]
build-backend = "uv_build"

[project]
name = "automl"
version = "0.1.0"
description = "State-of-the-art AutoML framework with GPU-enabled boosting, Optuna optimization, and ensemble strategies."
readme = "README.md"
keywords = [
    "automl",
    "machine-learning",
    "hyperparameter-optimization",
    "gpu-acceleration",
    "optuna",
    "xgboost",
    "lightgbm",
    "catboost",
    "ensemble",
    "explainability",
]
license = "Apache-2.0"
license-files = ["LICENSE"]
requires-python = ">=3.13"
authors = [
    { name = "Jainam Patel", email = "jainampatel1673@gmail.com" }
]
maintainers = [
    { name = "Jainam Patel", email = "jainampatel1673@gmail.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[project.urls]
Homepage = "https://github.com/Jainam1673/AutoML"
Repository = "https://github.com/Jainam1673/AutoML.git"
Documentation = "https://github.com/Jainam1673/AutoML#readme"
Issues = "https://github.com/Jainam1673/AutoML/issues"
Changelog = "https://github.com/Jainam1673/AutoML/blob/main/CHANGELOG.md"

[project.scripts]
automl = "automl.cli:app"

dependencies = [
    # Core scientific computing (latest versions)
    "numpy>=2.1.2",
    "pandas>=2.2.3",
    "polars>=1.13.1",  # Blazing fast dataframes
    "scikit-learn>=1.5.2",
    "scipy>=1.14.1",
    "pyarrow>=18.1.0",
    
    # Gradient boosting frameworks (GPU-enabled)
    "lightgbm>=4.5.0",
    "xgboost>=2.1.2",
    "catboost>=1.2.7",
    
    # Hyperparameter optimization
    "optuna>=4.1.0",
    "optuna-integration>=4.1.0",
    "hyperopt>=0.2.7",
    "scikit-optimize>=0.10.2",
    "bayesian-optimization>=2.0.0",
    
    # Configuration management
    "hydra-core>=1.3.2",
    "omegaconf>=2.3.0",
    "pydantic>=2.10.3",
    "pydantic-settings>=2.6.1",
    "pyyaml>=6.0.2",
    
    # MLOps and tracking
    "mlflow>=2.18.0",
    "wandb>=0.18.7",
    "tensorboard>=2.18.0",
    
    # Model explainability
    "shap>=0.46.0",
    "lime>=0.2.0.1",
    "interpret>=0.6.5",
    
    # Feature engineering
    "featuretools>=1.31.0",
    "category-encoders>=2.6.4",
    "feature-engine>=1.8.1",
    
    # CLI and UI
    "rich>=13.9.4",
    "typer>=0.15.1",
    "click>=8.1.7",
    "tqdm>=4.67.1",
    
    # Async and concurrency
    "asyncio>=3.4.3",
    "joblib>=1.4.2",
    "loky>=3.4.1",
    
    # Data validation
    "pandera>=0.20.4",
    "great-expectations>=1.2.3",
    
    # Caching and serialization
    "diskcache>=5.6.3",
    "msgpack>=1.1.0",
    "orjson>=3.10.12",
    "cloudpickle>=3.1.0",
]

[project.optional-dependencies]
distributed = [
    # Ray for distributed computing and hyperparameter search
    "ray[default]>=2.40.0",
    "ray[tune]>=2.40.0",
    "ray[serve]>=2.40.0",
    "ray[data]>=2.40.0",
    # Dask for out-of-core computation and exabyte-scale datasets
    "dask[complete]>=2024.11.2",
    "dask-ml>=2024.4.4",
    "distributed>=2024.11.2",
    # Cloud storage integration
    "s3fs>=2024.10.0",  # S3 support
    "gcsfs>=2024.10.0",  # Google Cloud Storage
    "adlfs>=2024.7.0",  # Azure Data Lake
    "fsspec>=2024.10.0",  # Unified filesystem interface
]
gpu = [
    "torch>=2.5.1",
    "torchvision>=0.20.1",
    "lightning>=2.4.0",
    "flash-attn>=2.7.2",
    "cupy-cuda12x>=13.3.0",
    "cuml-cu12>=24.12.0",
    "xgboost[gpu]>=2.1.2",
]
vision = [
    "timm>=1.0.12",  # PyTorch image models
    "torchvision>=0.20.1",
    "albumentations>=1.4.22",
    "opencv-python>=4.10.0",
    "pillow>=11.0.0",
    "torchmetrics>=1.5.2",
]
nlp = [
    "transformers>=4.47.1",
    "tokenizers>=0.21.0",
    "sentencepiece>=0.2.0",
    "accelerate>=1.2.1",
    "datasets>=3.2.0",
    "sentence-transformers>=3.3.1",
    "spacy>=3.8.3",
]
timeseries = [
    "prophet>=1.1.6",
    "neuralprophet>=0.9.2",
    "darts>=0.32.0",
    "statsforecast>=2.0.0",
    "neuralforecast>=1.7.5",
    "gluonts>=0.15.1",
    "tslearn>=0.6.3",
]
autogluon = [
    "autogluon>=1.2.0",
    "autogluon.tabular>=1.2.0",
    "autogluon.timeseries>=1.2.0",
]
nas = [
    "autokeras>=2.0.0",
    "keras-tuner>=1.4.7",
    "nni>=3.0",  # Neural Network Intelligence
]
api = [
    # REST API and async server
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.34.0",
    "pydantic>=2.10.3",
    "httpx>=0.28.1",
    "websockets>=14.1",
    # Distributed caching and task queue
    "redis>=5.2.1",
    "hiredis>=3.0.0",  # High-performance Redis parser
    "celery>=5.4.0",
    "kombu>=5.4.2",  # Messaging library
    # Production utilities
    "gunicorn>=23.0.0",  # WSGI HTTP Server
    "python-multipart>=0.0.18",  # Form data parsing
]
monitoring = [
    # Metrics and observability
    "prometheus-client>=0.21.0",
    "grafana-client>=4.0.2",
    "statsd>=4.0.1",
    # Model monitoring and drift detection
    "evidently>=0.4.48",
    "alibi-detect>=0.12.1",
    "deepchecks>=0.18.1",
    "nannyml>=0.10.7",
]
tracking = [
    # Experiment tracking
    "mlflow>=2.18.0",
    "wandb>=0.18.7",
    "tensorboard>=2.18.0",
    "aim>=3.24.0",
    # Model registry
    "mlflow-skinny>=2.18.0",
]
devtools = [
    "ipykernel>=6.29.5",
    "jupyter>=1.1.1",
    "notebook>=7.3.2",
    "jupyterlab>=4.3.4",
    "ipywidgets>=8.1.5",
]
production = [
    # Production-ready exabyte-scale stack
    "automl[distributed,api,monitoring,tracking]",
]
all = [
    "automl[distributed,gpu,vision,nlp,timeseries,autogluon,nas,api,monitoring,tracking]",
]

[project.scripts]
automl = "automl.cli:main"

[tool.uv]
package = true
default-groups = ["dev"]
python-preference = "managed"
required-version = ">=0.5.0"

[dependency-groups]
dev = [
    "pytest>=8.3",
    "pytest-cov>=5.0",
    "pytest-asyncio>=0.24",
    "hypothesis>=6.112",
    "ruff>=0.6",
    "mypy>=1.11",
    "types-PyYAML>=6.0.12",
    "types-requests>=2.32",
]
docs = [
    "mkdocs-material>=9.5",
    "mkdocstrings[python]>=0.24",
    "griffe>=0.45",
]
bench = [
    "pytest-benchmark>=4.0",
    "perfana>=0.0.8",
]
notebooks = [
    "polars[pandas]>=1.8",
    "plotly>=5.24",
]
qa = [
    "pytest-xdist>=3.6",
    "pytest-timeout>=2.3",
    "pytest-rerunfailures>=12.0",
]

[tool.uv.dependency-groups]
qa = { requires-python = ">=3.13" }

[tool.uv.workspace]
members = ["examples/*", "benchmarks/*"]

[tool.uv.pip]
compile-bytecode = true
prerelease = "allow"
strict = true

[tool.mypy]
python_version = "3.13"
check_untyped_defs = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
packages = ["automl"]

[tool.ruff]
line-length = 110
src = ["src"]
exclude = [".venv", "dist", "build"]

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "B", "ANN", "DTZ", "FBT", "ICN", "ISC", "PYI", "Q", "T20", "ARG", "PL", "RUF"]
ignore = ["ANN101", "ANN102", "FBT003"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --durations=10 --strict-markers --strict-config"
testpaths = ["tests"]
xfail_strict = true
filterwarnings = [
    "error",
    "ignore:distutils Version:DeprecationWarning",
]

[tool.coverage.run]
branch = true
source = ["automl"]
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 2
